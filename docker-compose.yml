services:

  redis:
    image: 'redis'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    restart: unless-stopped
    volumes:
      - redis-data:/data
  
  ingest:
    build:
      context: ./ingest
    depends_on: 
      - redis
    environment:
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
      - MQTT_TOPIC=${MQTT_TOPIC}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_KEY=${REDIS_KEY}
    restart: unless-stopped

  ingest-divers:
    build:
      context: ./ingest
    depends_on: 
      - redis
    environment:
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_USERNAME=${MQTT_USERNAME_DIVERS}
      - MQTT_PASSWORD=${MQTT_PASSWORD_DIVERS}
      - MQTT_TOPIC=${MQTT_TOPIC}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_KEY=${REDIS_KEY}
    restart: unless-stopped
  
  process:
    build:
      context: ./process
    depends_on:
      - redis
      - influxdb
    environment:
      - INFLUXDB_HOST=${INFLUXDB_HOST}
      - INFLUXDB_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_INIT_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_INIT_BUCKET}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_KEY=${REDIS_KEY}
    restart: unless-stopped
  
  influxdb:
    image: 'influxdb:2.4'
    ports:
     - 8086:8086
    volumes:
      - influxdb2-data:/var/lib/influxdb2
      - influxdb2-config:/etc/influxdb2
    restart: unless-stopped
    environment:
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_INIT_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_INIT_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
    labels:
      traefik.enable: "true"
      traefik.http.routers.dust_influx.rule: Host(`${APPLICATION_DOMAIN_NAME}`) && PathPrefix(`/influx`)
      traefik.http.routers.dust_influx.middlewares: dust_influx-stripprefix
      traefik.http.middlewares.dust_influx-stripprefix.stripprefix.prefixes: /influx
      traefik.http.services.dust_influx.loadbalancer.server.port: 8086
      traefik.docker.network: reverse_proxy
    networks:
      - default
      - reverse_proxy
 
  grafana:
    image: 'grafana/grafana'
    depends_on: 
      - influxdb
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_ENABLE_GZIP=true
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/dust.json
      - GF_SERVER_ROOT_URL=https://${APPLICATION_DOMAIN_NAME}/grafana
      - PLUGINS=redis-datasource
      - INFLUX_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUX_ORG=${INFLUXDB_INIT_ORG}
      - INFLUX_BUCKET=${INFLUXDB_INIT_BUCKET}
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/config.ini:/etc/grafana/config.ini
    labels:
      traefik.enable: "true"
      traefik.http.routers.dust_grafana.rule: Host(`${APPLICATION_DOMAIN_NAME}`) && PathPrefix(`/grafana`)
      traefik.http.routers.dust_grafana.middlewares: dust_grafana-stripprefix
      traefik.http.middlewares.dust_grafana-stripprefix.stripprefix.prefixes: /grafana
      traefik.http.services.dust_grafana.loadbalancer.server.port: 3000
      traefik.docker.network: reverse_proxy
    networks:
      - default
      - reverse_proxy
  
  weatherapi:
    build:
      context: ./weatherapi
    depends_on:
      - influxdb
    environment:
      - API_KEY=${WEATHER_API_KEY}
      - LOCATIONS=${WEATHER_API_LOCATIONS}
      - INFLUXDB_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_INIT_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_INIT_BUCKET}
      - INFLUXDB_HOST=${INFLUXDB_HOST}
      - INFLUXDB_PORT=${INFLUXDB_PORT}
    restart: unless-stopped
  
  weatherstation:
    image: 'telegraf'
    restart: unless-stopped
    volumes:
      - ./devbit-weatherstation-telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    environment:
      - INFLUX_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUX_ORG=${INFLUXDB_INIT_ORG}
      - INFLUX_BUCKET=${INFLUXDB_INIT_BUCKET}

  crodeon:
    build:
      context: ./devbit-crodeon
    depends_on:
      - influxdb
    restart: unless-stopped
    env_file:
      - path: ./devbit-crodeon/.env
        required: true
    environment:
      - INFLUXDB_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_INIT_ORG}
      - INFLUXDB_HOST=${INFLUXDB_HOST}
      - INFLUXDB_PORT=${INFLUXDB_PORT}

  sensoterra:
    build:
      context: ./devbit-sensoterra
    depends_on:
      - influxdb
    restart: unless-stopped
    env_file:
      - path: ./devbit-sensoterra/.env
        required: true
    environment:
      - INFLUXDB_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_INIT_ORG}
      - INFLUXDB_HOST=${INFLUXDB_HOST}
      - INFLUXDB_PORT=${INFLUXDB_PORT}
  
  mongodb:
    image: mongo:6.0.2
    restart: unless-stopped
    environment:
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE}
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
    volumes:
      - mongodb-data:/data/db

  backend:
    build:
      context: ./backend
    ports:
      - "3030:3030"
    depends_on:
      - influxdb
      - mongodb
    environment:
      - MONGODB_HOST=${MONGODB_HOST}
      - MONGODB_PORT=${MONGODB_PORT}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
      - MONGODB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME}
      - MONGODB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
      - INFLUXDB_HOST=${INFLUXDB_HOST}
      - INFLUXDB_PORT=${INFLUXDB_PORT}
      - INFLUXDB_BUCKET=${INFLUXDB_INIT_BUCKET}
      - INFLUXDB_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_INIT_ORG}
      - BACKEND_AUTH_SECRET=${BACKEND_AUTH_SECRET}
      - BACKEND_DOMAIN=${BACKEND_DOMAIN}
      - BACKEND_API_URL=${BACKEND_API_URL}
    labels:
      traefik.enable: "true"
      traefik.http.routers.dust_backend.rule: Host(`${APPLICATION_DOMAIN_NAME}`) && PathPrefix(`/api`)
      traefik.http.middlewares.dust_backend-stripprefix.stripprefix.prefixes: /api
      traefik.http.routers.dust_backend.middlewares: dust_backend-stripprefix
      traefik.http.services.dust_backend.loadbalancer.server.port: 3030
      traefik.docker.network: reverse_proxy
    restart: unless-stopped
    networks:
      - default
      - reverse_proxy

  api-docs:
    build:
      context: ./api-docs
    ports:
      - 80
    restart: unless-stopped
    networks:
      - reverse_proxy
    labels:
      traefik.enable: "true"
      traefik.http.routers.dust_api_docs.rule: Host(`${APPLICATION_DOMAIN_NAME}`) && PathPrefix(`/docs/api`)
      traefik.http.middlewares.dust_api_docs-stripprefix.stripprefix.prefixes: /docs/api
      # Adding the trailing slash to the url
      traefik.http.middlewares.dust_api_docs-addslash.redirectregex.regex: ^([a-z0-9_]+:\/\/[^/]+\/docs\/api)$$
      traefik.http.middlewares.dust_api_docs-addslash.redirectregex.replacement: $${1}/
      traefik.http.middlewares.dust_api_docs-addslash.redirectregex.permanent: "true"
      # Middlewares
      traefik.http.routers.dust_api_docs.middlewares: dust_api_docs-addslash, dust_api_docs-stripprefix
      traefik.http.services.dust_api_docs.loadbalancer.server.port: 80
      traefik.docker.network: reverse_proxy

#  public-frontend:
#   image: ghcr.io/vives-dust/frontend/dust-public-frontend:latest
#    ports:
#      - "8000:80"
#    depends_on:
#      - backend
#    labels:
#      traefik.enable: "true"
#      traefik.http.routers.dust_public_frontend.rule: Host(`${APPLICATION_DOMAIN_NAME}`)
#      traefik.http.services.dust_public_frontend.loadbalancer.server.port: 80
#      traefik.docker.network: reverse_proxy
#    restart: unless-stopped
#    networks:
#      - default
#      - reverse_proxy

volumes:
  influxdb2-data:
  influxdb2-config:
  redis-data:
  mongodb-data:

networks:
  reverse_proxy:
    external:
      name: reverse_proxy
