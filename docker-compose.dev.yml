version: '3.0'
services:

  redis:
    image: 'redis'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    restart: unless-stopped
    volumes:
      - redis-data:/data

  ingest:
    build:
      context: ./ingest
    depends_on: 
      - redis
    environment:
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
      - MQTT_TOPIC=${MQTT_TOPIC}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_KEY=${REDIS_KEY}
    restart: unless-stopped

  process:
    build:
      context: ./process
    depends_on:
      - redis
      - influxdb
    environment:
      - INFLUXDB_HOST=${INFLUXDB_HOST}
      - INFLUXDB_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_INIT_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_INIT_BUCKET}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_KEY=${REDIS_KEY}
    restart: unless-stopped
  influxdb:
    image: 'influxdb:2.1'
    ports:
     - 8086:8086
    volumes:
      - influxdb2-data:/var/lib/influxdb2
      - influxdb2-config:/etc/influxdb2
    restart: unless-stopped
    environment:
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_INIT_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_INIT_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}

  grafana:
    image: 'grafana/grafana'
    depends_on: 
      - influxdb
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_ENABLE_GZIP=true
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/dust.json
      - PLUGINS=redis-datasource
      - INFLUX_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUX_ORG=${INFLUXDB_INIT_ORG}
      - INFLUX_BUCKET=${INFLUXDB_INIT_BUCKET}
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/config.ini:/etc/grafana/config.ini
    labels:
      traefik.enable: "true"
      traefik.http.routers.dust_grafana.rule: Host(`${APPLICATION_DOMAIN_NAME}`)
      traefik.http.services.dust_grafana.loadbalancer.server.port: 3000
      traefik.docker.network: reverse_proxy
    networks:
      - default
      - reverse_proxy

  weatherapi:
    build:
      context: ./weatherapi
    depends_on:
      - influxdb
    environment:
      - API_KEY=${WEATHER_API_KEY}
      - LOCATIONS=${WEATHER_API_LOCATIONS}
      - INFLUXDB_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_INIT_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_INIT_BUCKET}
      - INFLUXDB_HOST=${INFLUXDB_HOST}
      - INFLUXDB_PORT=${INFLUXDB_PORT}
    restart: unless-stopped
  
  weatherstation:
    image: 'telegraf'
    restart: unless-stopped
    volumes:
      - ./devbit-weatherstation-telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    environment:
      - INFLUX_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUX_ORG=${INFLUXDB_INIT_ORG}
      - INFLUX_BUCKET=${INFLUXDB_INIT_BUCKET}

  mongodb:
    image: mongo:6.0.2
    restart: unless-stopped
    environment:
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE}
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
    volumes:
      - mongodb-data:/data/db

  # This is pure for early development
  mongoexpress:
    image: 'mongo-express'
    depends_on:
      - mongodb
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_SERVER=${MONGODB_HOST}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGODB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGODB_ROOT_PASSWORD}
    ports:
      - "8081:8081"

  backendv5:
    build:
      context: ./backendv5
      dockerfile: Dockerfile.dev
    ports:
      - "3030:3030"
    depends_on:
      - influxdb
      - mongodb
    environment:
      - MONGODB_HOST=${MONGODB_HOST}
      - MONGODB_PORT=${MONGODB_PORT}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
      - MONGODB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME}
      - MONGODB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
      - INFLUXDB_HOST=${INFLUXDB_HOST}
      - INFLUXDB_PORT=${INFLUXDB_PORT}
      - INFLUXDB_BUCKET=${INFLUXDB_INIT_BUCKET}
      - INFLUXDB_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_INIT_ORG}
      - BACKEND_AUTH_SECRET=${BACKEND_AUTH_SECRET}
      - BACKEND_DOMAIN=${BACKEND_DOMAIN}
      - BACKEND_API_URL=${BACKEND_API_URL}
    restart: unless-stopped
    volumes:
      - ./backendv5/src:/app/src
      - ./backendv5/config:/app/config
      - ./backendv5/public:/app/public

  api-docs:
    build:
      context: ./api-docs
    ports:
      - "80:80"
    restart: unless-stopped
    networks:
      - default
      - reverse_proxy
    labels:
      traefik.enable: "true"
      traefik.http.routers.dust_api_docs.rule: Host(`${APPLICATION_DOMAIN_NAME}`) && PathPrefix(`/docs/api`)
      traefik.http.middlewares.dust_api_docs-stripprefix.stripprefix.prefixes: /docs/api
      # Adding the trailing slash to the url
      traefik.http.middlewares.dust_api_docs-addslash.redirectregex.regex: ^([a-z0-9_]+:\/\/[^/]+\/docs\/api)$$
      traefik.http.middlewares.dust_api_docs-addslash.redirectregex.replacement: $${1}/
      traefik.http.middlewares.dust_api_docs-addslash.redirectregex.permanent: "true"
      # Middlewares
      traefik.http.routers.dust_api_docs.middlewares: dust_api_docs-addslash, dust_api_docs-stripprefix
      traefik.http.services.dust_api_docs.loadbalancer.server.port: 80
      traefik.docker.network: reverse_proxy

volumes:
  influxdb2-data:
  influxdb2-config:
  redis-data:
  mongodb-data:

networks:
  reverse_proxy:
    external:
      name: reverse_proxy
